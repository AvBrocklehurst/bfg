package main

import (
	"fmt"
	"os"
	"strings"
	"unicode"
)

const a = "++++++ [ > ++++++++++ < - ] > +++++ . "
const t = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ . -- . >++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ."
const r = ",[. > +++++ [ < - > -] < . . . ]"
const test = "--[----->+<]>---.++++++++++++.+.+++++++++.+[-->+<]>+++.++[-->+++<]>.++++++++++++.+.+++++++++.-[-->+++++<]>++.[--->++<]>-.-----------."
const time = ">+++++++++[<+++++++++++>-]<[>[-]>[-]<<[>+>+<<-]>>[<<+>>-]>>>[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]>[<+>-]>[<<++++++++++>>>+<-]<<-<-]+++++++++>[<->-]>>+>[<[-]<<+>>>-]>[-]+<<[>+>-<<-]<<<[>>+>+<<<-]>>>[<<<+>>>-]>[<+>-]<<-[>[-]<[-]]>>+<[>[-]<-]<++++++++[<++++++<++++++>>-]>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>[-]>[-]++++[<++++++++>-]<.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++++[<---------->-]<--.>+++++++++[<+++++++++>-]<--.-.>++++++++[<---------->-]<++.>++++++++[<++++++++++>-]<++++.------------.---.>+++++++[<---------->-]<+.>++++++++[<+++++++++++>-]<-.>++[<----------->-]<.+++++++++++..>+++++++++[<---------->-]<-----.---.>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>>++++[<++++++>-]<--.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++++++[<---------->-]<-.---.>+++++++[<++++++++++>-]<++++.+++++++++++++.++++++++++.------.>+++++++[<---------->-]<+.>++++++++[<++++++++++>-]<-.-.---------.>+++++++[<---------->-]<+.>+++++++[<++++++++++>-]<--.+++++++++++.++++++++.---------.>++++++++[<---------->-]<++.>+++++[<+++++++++++++>-]<.+++++++++++++.----------.>+++++++[<---------->-]<++.>++++++++[<++++++++++>-]<.>+++[<----->-]<.>+++[<++++++>-]<..>+++++++++[<--------->-]<--.>+++++++[<++++++++++>-]<+++.+++++++++++.>++++++++[<----------->-]<++++.>+++++[<+++++++++++++>-]<.>+++[<++++++>-]<-.---.++++++.-------.----------.>++++++++[<----------->-]<+.---.[-]<<<->[-]>[-]<<[>+>+<<-]>>[<<+>>-]>>>[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]>[<+>-]>[<<++++++++++>>>+<-]<<-<-]+++++++++>[<->-]>>+>[<[-]<<+>>>-]>[-]+<<[>+>-<<-]<<<[>>+>+<<<-]>>>[<<<+>>>-]<>>[<+>-]<<-[>[-]<[-]]>>+<[>[-]<-]<++++++++[<++++++<++++++>>-]>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>[-]>[-]++++[<++++++++>-]<.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++++[<---------->-]<--.>+++++++++[<+++++++++>-]<--.-.>++++++++[<---------->-]<++.>++++++++[<++++++++++>-]<++++.------------.---.>+++++++[<---------->-]<+.>++++++++[<+++++++++++>-]<-.>++[<----------->-]<.+++++++++++..>+++++++++[<---------->-]<-----.---.+++.---.[-]<<<]"

func main() {
	data := strings.Map(func(r rune) rune {
		if unicode.IsSpace(r) {
			return -1
		}
		return r
	}, r)
	err := run(data)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	fmt.Println("")
}

func format(fileName string) (data string, err error) {
	return
}

func run(data string) (err error) {
	cells := make([]int, 30000)
	cell := 0

	index := 0
	pass := false
	counterIndexs := []int{}
	openBracketIndexs := []int{}
	var char rune
	for index != len(data) {
		if pass && data[index] != ']' {
			continue
		}
		switch data[index] {
		case '+':
			cells[cell]++
			index++
		case '-':
			cells[cell]--
			index++
		case '>':
			cell++
			index++
		case '<':
			cell--
			index++
		case '.':
			fmt.Printf("%c", cells[cell])
			index++
		case ',':
			_, err = fmt.Scanf("%c", &char)
			if err != nil {
				return
			}
			cells[cell] = int(char)
			index++
		case '[':
			openBracketIndexs = append([]int{index}, openBracketIndexs...)
			counterIndexs = append([]int{cell}, counterIndexs...)
			if cells[counterIndexs[0]] != 0 {
				index++
			} else {
				pass = true
			}
		case ']':
			if len(openBracketIndexs) == 0 {
				err = fmt.Errorf("Unmatched closing bracket at index %d", index)
				return
			}
			if cells[counterIndexs[0]] != 0 {
				index = openBracketIndexs[0] + 1
			} else {
				openBracketIndexs = openBracketIndexs[1:]
				index++
			}
		}
	}
	if len(openBracketIndexs) > 0 {
		locations := fmt.Sprintf("%d", openBracketIndexs[0])
		for x := 0; x < len(openBracketIndexs)-1; x++ {
			locations += fmt.Sprintf(" and %d", openBracketIndexs[x])
		}
		err = fmt.Errorf("\n%d unclosed brackets at index %s", len(openBracketIndexs), locations)
	}
	return
}
